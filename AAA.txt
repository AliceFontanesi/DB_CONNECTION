function get(){
    fetch('http://localhost:8000/products/13')
    .then(function(response){
        if(!response.ok){
            throw new Error('Errore' + response.status);
        }
        return response.json();
    })
    .then(function(data){
        console.log(data);
        display(data);
    }).catch(function(error){
        console.error('Errore', error);
    })
}


function display(data){
    var textbox = document.getElementById("prova");
    textbox.value = data.data.id;
}


function post(){
    var dd = {
        data:{
            type: "products",
            attributes:{
                marca : "ciao",
                nome : "ciao",
                prezzo : 30,
            }
        }
    };


    var options = {
        method:'POST',
        headers:{
            'Content-Type':'application/json'
        },
        body:JSON.stringify(dd)
    };


    fetch('http://localhost:8000/products', options)
    .then(function(response){
        if(!response.ok){
            throw new Error('Errore' + response.status);
        }
        return response.json();
    })
    .then(function(data){
        console.log(data);
        add(data);
    }).catch(function(error){
        console.error('Errore', error);
    })

}

function add(data){
    var textbox = document.createElement('input');
    textbox.type = "text";
    textbox.value = data.data.id;
    var acapo = document.createElement('br');
    document.body.appendChild(acapo);
    document.body.appendChild(textbox);
    //remove
    var prova = document.getElementById("prova");
    prova.remove();
}












import json
from http.server import BaseHTTPRequestHandler, HTTPServer
from product import Product

class RequestHandler(BaseHTTPRequestHandler):
    
    def _set_response(self, status_code=200, content_type='application/json'):
        self.send_response(status_code)
        self.send_header('Content-type', content_type)
        self.send_header('Access-Control-Allow-Origin', '*')  # Consenti l'accesso da qualsiasi origine
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, DELETE, PATCH, OPTIONS')  # Specifica i metodi consentiti
        self.send_header('Access-Control-Allow-Headers', 'Content-type')  # Specifica gli header consentiti
        self.end_headers()
        
        
    @staticmethod
    def create_product_dict(product):
        product_dict = {
            "type": "products",
            "id": str(product.id),
            "attributes": {
                "marca": product.marca,
                "nome": product.nome,
                "prezzo": product.prezzo
            }
        }
        return product_dict
        

    def do_GET(self):
        if self.path == '/products':
            self.get_products()
        elif self.path.startswith('/products/'):
            parts = self.path.split('/')
            product_id = int(parts[2])
            self.get_product(product_id)
        else:
            self.send_error(404, 'Not Found')
            

    def get_products(self):
        records = Product.fetchAll()
        products_list = []
        for record in records:
            product_dict = self.create_product_dict(record)
            products_list.append(product_dict)

        self._set_response()
        response_data = {'data': products_list}
        self.wfile.write(json.dumps(response_data).encode('utf-8'))
    

    def get_product(self, product_id):
        product = Product.find(product_id)
        if product is not None:
            product_dict = self.create_product_dict(product)
            
            self._set_response()
            response_data = {'data': product_dict}
            self.wfile.write(json.dumps(response_data).encode('utf-8'))
        else:
            self.send_error(404, 'Product Not Found')
            
            
    def do_POST(self):
        if self.path == '/products':
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            self.create_product(post_data)
        else:
            self.send_error(404, 'Not Found')
            

    def create_product(self, post_data):
        try:
            data = json.loads(post_data.decode('utf-8'))
            if 'data' not in data or 'attributes' not in data['data'] or 'nome' not in data['data']['attributes'] or 'prezzo' not in data['data']['attributes'] or 'marca' not in data['data']['attributes']:
                self.send_error(400, 'Bad Request - Incomplete Data Request')
                return
            
            product = Product.create(data['data']['attributes'])
            product_dict = self.create_product_dict(product)
            self._set_response(status_code=201)
            response_data = {'data': product_dict}
            self.wfile.write(json.dumps(response_data).encode('utf-8'))
        except json.JSONDecodeError:
            self.send_error(400, 'Bad Request - Invalid JSON')
            
            
    def do_DELETE(self):
        if self.path.startswith('/products/'):
            parts = self.path.split('/')
            product_id = int(parts[2])
            product = Product.find(product_id)
            if product:
                self.delete_product(product)
            else:
                self.send_error(404, 'Product Not Found')
        else:
            self.send_error(404, 'Not Found')
            

    def delete_product(self, product):
        try:
            product.delete()
            self._set_response(status_code=204) 
        except Exception as e:
            self.send_error(500, f'Internal Server Error: {str(e)}')


    def do_PATCH(self):
        if self.path.startswith('/products/'):
            parts = self.path.split('/')
            product_id = int(parts[2])
            product = Product.find(product_id)
            if product:
                self.update_product(product)
            else:
                self.send_error(404, 'Product Not Found')
        else:
            self.send_error(404, 'Not Found')
        
            
    def update_product(self, product):
        try:
            content_length = int(self.headers['Content-Length'])
            patch_data = self.rfile.read(content_length)
            data = json.loads(patch_data.decode('utf-8'))
            
            if 'data' not in data or 'attributes' not in data['data'] or 'nome' not in data['data']['attributes'] or 'prezzo' not in data['data']['attributes'] or 'marca' not in data['data']['attributes']:
                self.send_error(400, 'Bad Request - Incomplete Data Request')
                return
                
            product.update(data['data']['attributes'])
            product_dict = self.create_product_dict(product)
            
            self._set_response()
            response_data = {'data': product_dict}
            self.wfile.write(json.dumps(response_data).encode('utf-8'))
        except Exception as e:
            self.send_error(500, f'Internal Server Error: {str(e)}')

    def do_OPTIONS(self):
        self._set_response(status_code=200)
        self.send_header('Allow', 'GET, POST, DELETE, PATCH, OPTIONS')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, DELETE, PATCH, OPTIONS')  # Specifica i metodi consentiti
        self.send_header('Access-Control-Allow-Headers', 'Content-type')  # Specifica gli header consentiti
        self.send_header('Access-Control-Max-Age', '86400')  # Specifica il tempo massimo di memorizzazione nella cache delle informazioni CORS
        self.end_headers()


def run(server_class=HTTPServer, handler_class=RequestHandler, port=8000):
    server_address = ('', port)
    httpd = server_class(server_address, handler_class)
    print(f'Starting server on port {port}...')
    httpd.serve_forever()

if __name__ == '__main__':
    run()














import mysql.connector

class DbManager:

    def __init__(self, host, port, username, password, database):
        self.host = host
        self.port = port
        self.username = username
        self.password = password
        self.database = database

    def connect(self):
        try:
            connection = mysql.connector.connect(
                host=self.host,
                port=self.port,
                user=self.username,
                password=self.password,
                database=self.database
            )
            return connection
        except mysql.connector.Error as e:
            print("Errore di connessione al database:", str(e))










from dbmanager import DbManager
import mysql.connector

class Product:

    @staticmethod
    def connector():
        try:
            #db_manager = DbManager("192.168.2.200", 3306, "fontanesi_alice", "Sevastopol.immodesty.Floyd.", "fontanesi_alice_ecommerce")
            #conn = db_manager.connect()
            db_manager = DbManager("localhost", 3306, "alice", "pass_db1616!", "ecommerce5E")
            conn = db_manager.connect()
            return conn
        except mysql.connector.Error as e:
            print("Errore durante la connessione al database:", str(e))
            
    def __init__(self, id, nome, prezzo, marca):
        self._id = id
        self._nome = nome
        self._prezzo = prezzo
        self._marca = marca
    
    @property
    def id(self):
        return self._id

    @property
    def nome(self):
        return self._nome

    @nome.setter
    def nome(self, value):
        self._nome = value

    @property
    def prezzo(self):
        return self._prezzo

    @prezzo.setter
    def prezzo(self, value):
        self._prezzo = value

    @property
    def marca(self):
        return self._marca

    @marca.setter
    def marca(self, value):
        self._marca = value

    @staticmethod
    def fetchAll(): 
        try: 
            conn = Product.connector()
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM products")
            records = cursor.fetchall()
            cursor.close()
            products = []
            for row in records:
                product = Product(id=row[0], nome=row[1], prezzo=row[2], marca=row[3])
                products.append(product)
            return products
        except mysql.connector.Error as e:
            print("Errore durante la ricerca dei prodotti:", str(e))

    @staticmethod
    def find(id): 
        try:
            conn = Product.connector()
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM products WHERE id = %s", (id,))
            row = cursor.fetchone()
            conn.close()
            if row:
                return Product(id=row[0], nome=row[1], prezzo=row[2], marca=row[3])
            else:
                return None
        except mysql.connector.Error as e:
            print("Errore durante la ricerca del prodotto:", str(e))
            

    @staticmethod
    def create(product_data): 
        try:
            conn = Product.connector()
            cursor = conn.cursor()
            cursor.execute("INSERT INTO products (nome, prezzo, marca) VALUES (%s, %s, %s)", (product_data['nome'], product_data['prezzo'], product_data['marca']))
            conn.commit()
            product_id = cursor.lastrowid
            conn.close()
            return Product(id=product_id, nome=product_data["nome"], prezzo=product_data["prezzo"], marca=product_data["marca"])
        except mysql.connector.Error as e:
            print("Errore durante la creazione del prodotto:", str(e))

    def update(self, product_data): 
        try:
            conn = Product.connector()
            cursor = conn.cursor()
            cursor.execute("UPDATE products SET marca = %s, nome = %s, prezzo = %s WHERE id = %s", (product_data['marca'], product_data['nome'], product_data['prezzo'], self.id,))
            conn.commit()
            self.marca = product_data['marca']
            self.nome = product_data['nome']
            self.prezzo = product_data['prezzo']
            conn.close()
        except mysql.connector.Error as e:
            print("Errore durante l'aggiornamento del prodotto:", str(e))
            
    def delete(self): 
        try:
            conn = Product.connector()
            cursor = conn.cursor()
            cursor.execute("DELETE FROM products WHERE id = %s", (self.id,))
            conn.commit()
            conn.close()
        except mysql.connector.Error as e:
            print("Errore durante l'eliminazione del prodotto:", str(e))
